{
  "name": "New FLow",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.heygen.com/v2/video/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"Timeless Beauty Clip\",\n  \"dimension\": { \n    \"width\": 1080, \n    \"height\": 1920 \n  },\n  \"caption\": false,\n  \"video_inputs\": [\n    {\n      \"character\": {\n        \"type\": \"avatar\",\n        \"avatar_id\": \"860b640038db4b2c9ed7720196ed9da3\",\n        \"avatar_style\": \"circle\",\n        \"circle_background_color\": \"#000000\",\n        \"scale\": 0.6,\n        \"offset\": { \"x\": 0.3, \"y\": 0.4 },\n        \"talking_style\": \"stable\",\n        \"expression\": \"default\"\n      },\n      \"voice\": {\n        \"type\": \"text\",\n        \"voice_id\": \"6157027b950d4954a9a526a8591d6dab\",\n        \"input_text\": \"Designed for those who love timeless beauty\",\n        \"speed\": 1.1,\n        \"pitch\": 0,\n        \"emotion\": \"Soothing\",\n        \"locale\": \"en-US\"\n      },\n      \"background\": {\n        \"type\": \"image\",\n        \"url\": \"https://drive.google.com/file/d/1Q_RCgAP3euwNKwDN6xXN8m3VChT8FN9r/view?usp=sharingr\",\n        \"fit\": \"cover\"\n      },\n      \"text\": {\n        \"type\": \"text\",\n        \"text\": \"Designed for those who love timeless beauty\",\n        \"font_family\": \"Inter\",\n        \"font_size\": 56,\n        \"font_weight\": \"700\",\n        \"color\": \"#000000\",\n        \"stroke\": { \"width\": 2, \"color\": \"#000000\" },\n        \"shadow\": { \n          \"offset\": { \"x\": 2, \"y\": 2 }, \n          \"blur\": 6, \n          \"color\": \"rgba(0,0,0,1)\" \n        },\n        \"position\": { \"x\": 0.1, \"y\": 0.1 },\n        \"text_align\": \"center\",\n        \"line_height\": 1.1,\n        \"timing\": \"auto\",\n        \"sync_to\": \"voice\"\n      }\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -720,
        -176
      ],
      "id": "4d683414-8426-4ab4-99dc-f549627dd9d8",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "KhVnO0U1YZcMe0lc",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2864,
        -320
      ],
      "id": "454aa544-06e0-4b92-a3f5-68b474a135a5",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "url": "https://api.heygen.com/v1/video_status.get",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "video_id",
              "value": "={{ $json.data.video_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "video_id",
              "value": "={{ $json.data.id }} {{ $json.data.video_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -240,
        -176
      ],
      "id": "5704345f-36f1-4180-8eec-7ec1e39dc91f",
      "name": "HTTP Request1",
      "retryOnFail": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "KhVnO0U1YZcMe0lc",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# INSTRUCTIONS\n\nPerform the following tasks, in order:\n\n1. Fetch the top 10 stories from Hacker News from the past 24 hours related to AI or LLMs. \n\n2. Select the top story that is most likely to go viral on social media. \n\n3. Fetch the article and Hacker News comments.\n\n4. Create a 20-second monologue script for an AI avatar video, following these guidelines:\n   - The script should be approximately 30 seconds when spoken aloud.\n   - Include lots of details and statistics from the article.\n   - Use 6th grade reading level.\n   - Balanced viewpoint.\n   - Punctuations indicate pauses, but we want to minimize unnatural pauses, so only use a comma for punctuation.\n   - Do not use any commas in the first 2 sentences, and use them sparingly in the rest of the script.\n\n5. Update the script's first sentence to use sensational viral hooks, tailored to the content, that grab the viewer's attention.\n\n6. Replace the last sentence with: \"Hit follow to stay ahead in AI!\"\n\n# OUTPUT FORMAT\n\nONLY output the exact video script. Do not output anything else. NEVER include intermediate thoughts, notes, or formatting.",
        "options": {
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -2656,
        -304
      ],
      "id": "647cb125-1f26-4e77-98fe-e9355af38e87",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "articleId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Article_ID', ``, 'string') }}",
        "additionalFields": {
          "includeComments": true
        }
      },
      "type": "n8n-nodes-base.hackerNewsTool",
      "typeVersion": 1,
      "position": [
        -2432,
        0
      ],
      "id": "0f2eadd3-2a5f-4ec6-84f0-a432e7352188",
      "name": "Fetch HN Article"
    },
    {
      "parameters": {
        "resource": "all",
        "additionalFields": {
          "keyword": "AI",
          "tags": [
            "front_page"
          ]
        }
      },
      "type": "n8n-nodes-base.hackerNewsTool",
      "typeVersion": 1,
      "position": [
        -2544,
        32
      ],
      "id": "048eb61c-6b15-46b1-8d87-29213ff08adb",
      "name": "Fetch HN Front Page"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2688,
        16
      ],
      "id": "9364af6d-bce0-4d33-8be8-3e24bb61606b",
      "name": "Write Script",
      "credentials": {
        "openAiApi": {
          "id": "Y31pka7q7c93EqF1",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "amount": 60
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        224,
        -80
      ],
      "id": "2f38cbf4-2e0d-42c7-961c-bf11c75211d2",
      "name": "Wait",
      "webhookId": "cdae7e1d-8e43-433e-8e43-1100c2b2de7e"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7c05ff6d-4139-430e-9530-687d5b1201f1",
              "leftValue": "={{ $json.data.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -32,
        -176
      ],
      "id": "24ef6179-4499-4249-93f5-ad94be948f35",
      "name": "If1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=you are video caption(each 10-15 words) generator based on the input {{ $json.output }}\n "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2272,
        -304
      ],
      "id": "8d3db285-c8ef-4b6c-8ac8-860d91fd0660",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.captions",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1920,
        -304
      ],
      "id": "1a56f7dc-1fb5-4920-a989-70104f8d847c",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"captions\": [\n    {\n      \"id\": 1,\n      \"caption\": \"string\",\n      \"tag\": \"caption_1\"\n    }\n  ]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -2112,
        -96
      ],
      "id": "f41ea2c5-3370-4aba-ab26-84d218565259",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.caption }} id :{{ $json.id }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are ImagePromptifier. Convert the input *caption* into a high-quality text-to-image brief for generating a vertical video background.\n\nRequirements:\n- Scene fits 9:16 vertical, safe “copy space” at top & bottom for overlays.\n- No on-image text, subtitles, logos, watermarks, frames, borders, UI.\n- One clear subject, clean composition, strong depth, coherent lighting.\n- SFW only. Avoid gore, violence, explicit content.\n- Do NOT mention “avatar”, “caption”, or any meta-instructions.\n\nYou will return ONLY a JSON object with EXACTLY these two top-level keys:\n{\n  \"image Prompt\": \"string (a vivid image description for a 9:16 vertical background; no text/watermarks/logos; clean composition; SFW)\",\n  \"id\": \"{{ $json.id }}\"\n}\n\nCaption: \"{{ $json.caption }}\"\nId: \"{{ $json.id }}\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1712,
        -304
      ],
      "id": "632c5347-d70a-4f05-8a7e-e648b6d02057",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"image Prompt\": \"\",\n    \"id\":\"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1728,
        -80
      ],
      "id": "a5893a16-b9a0-4d01-906f-7ee78f6f857a",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "resource": "image",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash-image-preview",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash-image-preview (Nano Banana)"
        },
        "prompt": "={{ $json.output['image Prompt'] }}\n",
        "options": {
          "sampleCount": 1,
          "binaryPropertyOutput": "=data_id :{{ $json.output.id }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -1360,
        -304
      ],
      "id": "be060ba4-c797-4ba6-864c-55b2131b5df7",
      "name": "Generate an image",
      "credentials": {
        "googlePalmApi": {
          "id": "U0i8zKLyKWgDmyIF",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Input: items with binary image from \"Generate an image\"\n// Output: same items with binary on \"data\" and a filename in json.fileName\n\nreturn items.map((item, i) => {\n  // 1) Find your caption id (handles \"data_id\", \"data_id \" etc.)\n  const idKey = Object.keys(item.json || {}).find(k => k.replace(/\\s/g,'') === 'data_id');\n  const dataId = idKey ? item.json[idKey] : (item.json?.data_id ?? (i + 1));\n\n  // 2) Normalize binary key to \"data\" (Google Drive node default)\n  const binKeys = Object.keys(item.binary || {});\n  if (binKeys.length === 0) throw new Error('No binary on item');\n  const currentBin = binKeys[0];\n  if (currentBin !== 'data') {\n    item.binary.data = item.binary[currentBin];\n    delete item.binary[currentBin];\n  }\n\n  // 3) Build filename with the right extension\n  const ext = (item.binary.data.fileExtension || 'png').toLowerCase();\n  item.json.fileName = `image_${dataId}.${ext}`;\n\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1152,
        -304
      ],
      "id": "60e06314-1f3c-4abc-b5ac-3b394f7970a7",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -944,
        -304
      ],
      "id": "390cc10c-0b65-4a5e-a588-256a30d7c492",
      "name": "Upload file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "7joHYCxWbStKF0KH",
          "name": "Google Drive account"
        }
      }
    }
  ],
  "pinData": {
    "AI Agent3": [
      {
        "json": {
          "output": {
            "image Prompt": "A dramatic airplane cabin scene, shot from a vertical perspective. A surprised passenger sits in an aisle seat looking over shoulder, sunlight streaming in through the oval window onto crisp airline seats and luggage. Cabin lights create a modern, bright ambiance. Background features rows of seats, overhead bins, and blurred passengers to emphasize depth. Ample clear space at the top and bottom for overlays, composition is tidy and free of distractions.",
            "id": "1"
          }
        }
      },
      {
        "json": {
          "output": {
            "image Prompt": "A United Airlines jet cruising high above the clouds at 36,000 feet, sunlight glinting off its fuselage. The perspective shows the jet in flight with a dramatic sense of scale against the vast blue sky, hints of thin wispy clouds and the curve of the earth below. A small, unidentifiable object streaks past the aircraft, leaving a subtle motion blur trail, capturing a moment of sudden midair encounter. The focus is on the airplane and the mystery object, with the background providing clear open space at the top and bottom.",
            "id": "2"
          }
        }
      }
    ]
  },
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch HN Article": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Fetch HN Front Page": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Write Script": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "Generate an image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate an image": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5cc07c7d-7b8d-4716-9029-3eb1de1a118a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c9c7e6bcbebaf598e1d9e34c9e37f6af9f4fe2e9728475aa4142e70988c54eb4"
  },
  "id": "BC6wkdXRgzrfJedP",
  "tags": []
}